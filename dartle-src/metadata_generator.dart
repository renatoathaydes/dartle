import 'dart:io' show File;

import 'package:dartle/dartle.dart';
import 'package:path/path.dart' show join;
import 'package:yaml/yaml.dart';

class DartleVersionFileGenerator {
  late final Task task;

  DartleVersionFileGenerator(String rootDir) {
    final generatedFile = File(join(rootDir, 'lib/src/dartle_version.g.dart'));
    final specFile = File(join(rootDir, 'pubspec.yaml'));

    task = Task(
        (_) async => await _generateVersionDartFile(generatedFile, specFile),
        name: 'generateDartSources',
        runCondition: RunOnChanges(
          inputs: file(specFile.path),
          outputs: file(generatedFile.path),
        ),
        description: 'Generates Dart source files');
  }

  Future<void> _generateVersionDartFile(
      File generatedFile, File specFile) async {
    final yaml = loadYaml(await specFile.readAsString());
    final dartleVersion = yaml['version'] as String?;
    if (dartleVersion == null) {
      throw DartleException(message: 'pubspec.yaml does not have a version');
    }
    await generatedFile.writeAsString('// generated by '
        'dartle-src/metadata_generator.dart\n'
        "const dartleVersion = '$dartleVersion';\n");
  }
}
